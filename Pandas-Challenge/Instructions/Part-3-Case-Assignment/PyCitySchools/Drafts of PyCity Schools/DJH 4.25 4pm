{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyCity Schools Analysis\n",
    "\n",
    "* As a whole, schools with higher budgets, did not yield better test results. By contrast, schools with higher spending per student actually (\\$645-675) underperformed compared to schools with smaller budgets (<\\$585 per student).\n",
    "\n",
    "* As a whole, smaller and medium sized schools dramatically out-performed large sized schools on passing math performances (89-91% passing vs 67%).\n",
    "\n",
    "* As a whole, charter schools out-performed the public district schools across all metrics. However, more analysis will be required to glean if the effect is due to school practices or the fact that charter schools tend to serve smaller student populations per school. \n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student ID</th>\n",
       "      <th>student_name</th>\n",
       "      <th>gender</th>\n",
       "      <th>grade</th>\n",
       "      <th>school_name</th>\n",
       "      <th>reading_score</th>\n",
       "      <th>math_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Paul Bradley</td>\n",
       "      <td>M</td>\n",
       "      <td>9th</td>\n",
       "      <td>Huang High School</td>\n",
       "      <td>66</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Victor Smith</td>\n",
       "      <td>M</td>\n",
       "      <td>12th</td>\n",
       "      <td>Huang High School</td>\n",
       "      <td>94</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Kevin Rodriguez</td>\n",
       "      <td>M</td>\n",
       "      <td>12th</td>\n",
       "      <td>Huang High School</td>\n",
       "      <td>90</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Dr. Richard Scott</td>\n",
       "      <td>M</td>\n",
       "      <td>12th</td>\n",
       "      <td>Huang High School</td>\n",
       "      <td>67</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Bonnie Ray</td>\n",
       "      <td>F</td>\n",
       "      <td>9th</td>\n",
       "      <td>Huang High School</td>\n",
       "      <td>97</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Student ID       student_name gender grade        school_name  \\\n",
       "0           0       Paul Bradley      M   9th  Huang High School   \n",
       "1           1       Victor Smith      M  12th  Huang High School   \n",
       "2           2    Kevin Rodriguez      M  12th  Huang High School   \n",
       "3           3  Dr. Richard Scott      M  12th  Huang High School   \n",
       "4           4         Bonnie Ray      F   9th  Huang High School   \n",
       "\n",
       "   reading_score  math_score  \n",
       "0             66          79  \n",
       "1             94          61  \n",
       "2             90          60  \n",
       "3             67          58  \n",
       "4             97          84  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load \n",
    "school_data_to_load = \"Resources/schools_complete.csv\"\n",
    "student_data_to_load = \"Resources/students_complete.csv\"\n",
    "\n",
    "# Read School and Student Data File and store into Pandas Data Frames\n",
    "school_data = pd.read_csv(school_data_to_load)\n",
    "student_data = pd.read_csv(student_data_to_load)\n",
    "\n",
    "# Combine the data into a single dataset (consider using a left join)\n",
    "pyschools_merge = pd.merge(school_data, student_data, on=\"school_name\", how='left')\n",
    "\n",
    "pyschools_merge = pyschools_merge.rename(columns={'budget': 'Budget', 'grade': 'Grade', \"school_name\":\"School\", \"size\": 'Enrollment', \"student_name\": 'Student', 'reading_score': \"Reading Score\", \"math_score\": 'Math Score'})\n",
    "\n",
    "student_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Schools</th>\n",
       "      <th>Total Enrollment</th>\n",
       "      <th>Total Budget</th>\n",
       "      <th>Average Reading Score</th>\n",
       "      <th>Average Math Score</th>\n",
       "      <th>Reading % Passing</th>\n",
       "      <th>Math % Passing</th>\n",
       "      <th>Overall % Passing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "      <td>39170</td>\n",
       "      <td>24649428</td>\n",
       "      <td>81.87784</td>\n",
       "      <td>78.985371</td>\n",
       "      <td>85.805463</td>\n",
       "      <td>74.980853</td>\n",
       "      <td>80.393158</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Schools  Total Enrollment  Total Budget  Average Reading Score  \\\n",
       "0                 15             39170      24649428               81.87784   \n",
       "\n",
       "   Average Math Score  Reading % Passing  Math % Passing  Overall % Passing  \n",
       "0           78.985371          85.805463       74.980853          80.393158  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#dataframe needs to have school ID, budget, schoool, enrollment,  \n",
    "\n",
    "#Calculate the Totals (Schools and Students)\n",
    "numschools=school_data[\"School ID\"].count()\n",
    "\n",
    "districtbudget=school_data['budget'].sum()\n",
    "\n",
    "\n",
    "#create customized dataframe for rest of analysis\n",
    "districtsum_df = pyschools_merge [['Student ID', 'Reading Score', 'Math Score']]\n",
    "\n",
    "\n",
    "numstudents=districtsum_df[\"Student ID\"].count()\n",
    "\n",
    "\n",
    "# Calculate the Average Scores\n",
    "readingave=districtsum_df[\"Reading Score\"].mean()\n",
    "\n",
    "\n",
    "mathave=districtsum_df[\"Math Score\"].mean()\n",
    "\n",
    "\n",
    "# Calculate the Percentage Pass Rates\n",
    "passingreading = districtsum_df.loc[districtsum_df['Reading Score'] >= 70]['Reading Score']\n",
    "percpassreading = (len(passingreading)/numstudents)*100\n",
    "\n",
    "\n",
    "\n",
    "passingmath = districtsum_df.loc[districtsum_df['Math Score'] >= 70]['Math Score']\n",
    "percpassmath = (len(passingmath)/numstudents) * 100\n",
    "\n",
    "percpassboth = (percpassreading+percpassmath)/2\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "school_data_complete = pd.DataFrame({\"Number of Schools\": [numschools],\n",
    "                             \"Total Enrollment\": [numstudents],\n",
    "                             \"Total Budget\": [districtbudget],\n",
    "                              \"Average Reading Score\": [readingave],\n",
    "                              \"Average Math Score\": [mathave],\n",
    "                              \"Reading % Passing\": [percpassreading],\n",
    "                              \"Math % Passing\": [percpassmath],\n",
    "                              \"Overall % Passing\": [percpassboth]})\n",
    "\n",
    "school_data_complete\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Display the data frame\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## School Summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'DataFrame' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-115-5e0a06e8165a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[1;31m#reorganize columns in the DF\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     30\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 31\u001b[1;33m \u001b[0mschool_summary_df\u001b[0m \u001b[1;33m=\u001b[0m\u001b[0mschool_group\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;34m\"Enrollment\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Budget\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Per Pupil Budget\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Reading Score\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Math Score\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Passing % Reading'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Passing % Math'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Overall % Passing'\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     32\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'DataFrame' object is not callable"
     ]
    }
   ],
   "source": [
    "# Calculate the total school budget and per capita spending: DONE\n",
    "\n",
    "school_sum = pyschools_merge [['School', 'type','Enrollment', 'Budget', 'Reading Score', 'Math Score']]\n",
    "school_group = school_sum.groupby([\"School\"]).mean()\n",
    "school_group['Per Pupil Budget'] = school_group [\"Budget\"]/school_group['Enrollment']\n",
    "\n",
    "\n",
    "passed_reading = student_data.loc[student_data['reading_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_reading\n",
    "\n",
    "passed_math = student_data.loc[student_data['math_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_math\n",
    "\n",
    "total_enr = student_data.groupby('school_name').count()['Student ID']\n",
    "\n",
    "pct_passed_reading_by_school = (passed_reading/total_enr)*100\n",
    "pct_passed_math_by_school = (passed_math/total_enr)*100\n",
    "\n",
    "\n",
    "overall_pct_passed_by_school = ((pct_passed_reading_by_school + pct_passed_math_by_school)/2)\n",
    "\n",
    "school_summary_df=pd.DataFrame(school_group)\n",
    "\n",
    "\n",
    "school_summary_df['Passing % Reading'] = pct_passed_reading_by_school\n",
    "school_summary_df['Passing % Math'] = pct_passed_math_by_school\n",
    "school_summary_df['Overall % Passing'] = overall_pct_passed_by_school \n",
    "\n",
    "#reorganize columns in the DF\n",
    "\n",
    "school_summary_df =school_group({\"Enrollment\", \"Budget\", \"Per Pupil Budget\", \"Reading Score\", \"Math Score\", 'Passing % Reading', 'Passing % Math', 'Overall % Passing'})\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "                                              "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top Performing Schools (By Passing Rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Enrollment</th>\n",
       "      <th>Budget</th>\n",
       "      <th>Reading Score</th>\n",
       "      <th>Math Score</th>\n",
       "      <th>Per Pupil Budget</th>\n",
       "      <th>Passing % Reading</th>\n",
       "      <th>Passing % Math</th>\n",
       "      <th>Overall % Passing</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>School</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rodriguez High School</th>\n",
       "      <td>3999.0</td>\n",
       "      <td>2547363.0</td>\n",
       "      <td>80.744686</td>\n",
       "      <td>76.842711</td>\n",
       "      <td>637.0</td>\n",
       "      <td>80.220055</td>\n",
       "      <td>66.366592</td>\n",
       "      <td>73.293323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Figueroa High School</th>\n",
       "      <td>2949.0</td>\n",
       "      <td>1884411.0</td>\n",
       "      <td>81.158020</td>\n",
       "      <td>76.711767</td>\n",
       "      <td>639.0</td>\n",
       "      <td>80.739234</td>\n",
       "      <td>65.988471</td>\n",
       "      <td>73.363852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Huang High School</th>\n",
       "      <td>2917.0</td>\n",
       "      <td>1910635.0</td>\n",
       "      <td>81.182722</td>\n",
       "      <td>76.629414</td>\n",
       "      <td>655.0</td>\n",
       "      <td>81.316421</td>\n",
       "      <td>65.683922</td>\n",
       "      <td>73.500171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Johnson High School</th>\n",
       "      <td>4761.0</td>\n",
       "      <td>3094650.0</td>\n",
       "      <td>80.966394</td>\n",
       "      <td>77.072464</td>\n",
       "      <td>650.0</td>\n",
       "      <td>81.222432</td>\n",
       "      <td>66.057551</td>\n",
       "      <td>73.639992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford High School</th>\n",
       "      <td>2739.0</td>\n",
       "      <td>1763916.0</td>\n",
       "      <td>80.746258</td>\n",
       "      <td>77.102592</td>\n",
       "      <td>644.0</td>\n",
       "      <td>79.299014</td>\n",
       "      <td>68.309602</td>\n",
       "      <td>73.804308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hernandez High School</th>\n",
       "      <td>4635.0</td>\n",
       "      <td>3022020.0</td>\n",
       "      <td>80.934412</td>\n",
       "      <td>77.289752</td>\n",
       "      <td>652.0</td>\n",
       "      <td>80.862999</td>\n",
       "      <td>66.752967</td>\n",
       "      <td>73.807983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bailey High School</th>\n",
       "      <td>4976.0</td>\n",
       "      <td>3124928.0</td>\n",
       "      <td>81.033963</td>\n",
       "      <td>77.048432</td>\n",
       "      <td>628.0</td>\n",
       "      <td>81.933280</td>\n",
       "      <td>66.680064</td>\n",
       "      <td>74.306672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Holden High School</th>\n",
       "      <td>427.0</td>\n",
       "      <td>248087.0</td>\n",
       "      <td>83.814988</td>\n",
       "      <td>83.803279</td>\n",
       "      <td>581.0</td>\n",
       "      <td>96.252927</td>\n",
       "      <td>92.505855</td>\n",
       "      <td>94.379391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shelton High School</th>\n",
       "      <td>1761.0</td>\n",
       "      <td>1056600.0</td>\n",
       "      <td>83.725724</td>\n",
       "      <td>83.359455</td>\n",
       "      <td>600.0</td>\n",
       "      <td>95.854628</td>\n",
       "      <td>93.867121</td>\n",
       "      <td>94.860875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wright High School</th>\n",
       "      <td>1800.0</td>\n",
       "      <td>1049400.0</td>\n",
       "      <td>83.955000</td>\n",
       "      <td>83.682222</td>\n",
       "      <td>583.0</td>\n",
       "      <td>96.611111</td>\n",
       "      <td>93.333333</td>\n",
       "      <td>94.972222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wilson High School</th>\n",
       "      <td>2283.0</td>\n",
       "      <td>1319574.0</td>\n",
       "      <td>83.989488</td>\n",
       "      <td>83.274201</td>\n",
       "      <td>578.0</td>\n",
       "      <td>96.539641</td>\n",
       "      <td>93.867718</td>\n",
       "      <td>95.203679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Griffin High School</th>\n",
       "      <td>1468.0</td>\n",
       "      <td>917500.0</td>\n",
       "      <td>83.816757</td>\n",
       "      <td>83.351499</td>\n",
       "      <td>625.0</td>\n",
       "      <td>97.138965</td>\n",
       "      <td>93.392371</td>\n",
       "      <td>95.265668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pena High School</th>\n",
       "      <td>962.0</td>\n",
       "      <td>585858.0</td>\n",
       "      <td>84.044699</td>\n",
       "      <td>83.839917</td>\n",
       "      <td>609.0</td>\n",
       "      <td>95.945946</td>\n",
       "      <td>94.594595</td>\n",
       "      <td>95.270270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thomas High School</th>\n",
       "      <td>1635.0</td>\n",
       "      <td>1043130.0</td>\n",
       "      <td>83.848930</td>\n",
       "      <td>83.418349</td>\n",
       "      <td>638.0</td>\n",
       "      <td>97.308869</td>\n",
       "      <td>93.272171</td>\n",
       "      <td>95.290520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabrera High School</th>\n",
       "      <td>1858.0</td>\n",
       "      <td>1081356.0</td>\n",
       "      <td>83.975780</td>\n",
       "      <td>83.061895</td>\n",
       "      <td>582.0</td>\n",
       "      <td>97.039828</td>\n",
       "      <td>94.133477</td>\n",
       "      <td>95.586652</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Enrollment     Budget  Reading Score  Math Score  \\\n",
       "School                                                                    \n",
       "Rodriguez High School      3999.0  2547363.0      80.744686   76.842711   \n",
       "Figueroa High School       2949.0  1884411.0      81.158020   76.711767   \n",
       "Huang High School          2917.0  1910635.0      81.182722   76.629414   \n",
       "Johnson High School        4761.0  3094650.0      80.966394   77.072464   \n",
       "Ford High School           2739.0  1763916.0      80.746258   77.102592   \n",
       "Hernandez High School      4635.0  3022020.0      80.934412   77.289752   \n",
       "Bailey High School         4976.0  3124928.0      81.033963   77.048432   \n",
       "Holden High School          427.0   248087.0      83.814988   83.803279   \n",
       "Shelton High School        1761.0  1056600.0      83.725724   83.359455   \n",
       "Wright High School         1800.0  1049400.0      83.955000   83.682222   \n",
       "Wilson High School         2283.0  1319574.0      83.989488   83.274201   \n",
       "Griffin High School        1468.0   917500.0      83.816757   83.351499   \n",
       "Pena High School            962.0   585858.0      84.044699   83.839917   \n",
       "Thomas High School         1635.0  1043130.0      83.848930   83.418349   \n",
       "Cabrera High School        1858.0  1081356.0      83.975780   83.061895   \n",
       "\n",
       "                       Per Pupil Budget  Passing % Reading  Passing % Math  \\\n",
       "School                                                                       \n",
       "Rodriguez High School             637.0          80.220055       66.366592   \n",
       "Figueroa High School              639.0          80.739234       65.988471   \n",
       "Huang High School                 655.0          81.316421       65.683922   \n",
       "Johnson High School               650.0          81.222432       66.057551   \n",
       "Ford High School                  644.0          79.299014       68.309602   \n",
       "Hernandez High School             652.0          80.862999       66.752967   \n",
       "Bailey High School                628.0          81.933280       66.680064   \n",
       "Holden High School                581.0          96.252927       92.505855   \n",
       "Shelton High School               600.0          95.854628       93.867121   \n",
       "Wright High School                583.0          96.611111       93.333333   \n",
       "Wilson High School                578.0          96.539641       93.867718   \n",
       "Griffin High School               625.0          97.138965       93.392371   \n",
       "Pena High School                  609.0          95.945946       94.594595   \n",
       "Thomas High School                638.0          97.308869       93.272171   \n",
       "Cabrera High School               582.0          97.039828       94.133477   \n",
       "\n",
       "                       Overall % Passing  \n",
       "School                                    \n",
       "Rodriguez High School          73.293323  \n",
       "Figueroa High School           73.363852  \n",
       "Huang High School              73.500171  \n",
       "Johnson High School            73.639992  \n",
       "Ford High School               73.804308  \n",
       "Hernandez High School          73.807983  \n",
       "Bailey High School             74.306672  \n",
       "Holden High School             94.379391  \n",
       "Shelton High School            94.860875  \n",
       "Wright High School             94.972222  \n",
       "Wilson High School             95.203679  \n",
       "Griffin High School            95.265668  \n",
       "Pena High School               95.270270  \n",
       "Thomas High School             95.290520  \n",
       "Cabrera High School            95.586652  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort and show top five schools\n",
    "#sort_values see review material\n",
    "school_summary_df.sort_values('Overall % Passing')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bottom Performing Schools (By Passing Rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort and show bottom five schools\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Math Scores by Grade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create data series of scores by grade levels using conditionals\n",
    "\n",
    "gradeleveldf=pyschools_merge[['School', 'Grade', 'Reading Score', 'Math Score']]\n",
    "\n",
    "ninth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"9th\")]\n",
    "tenth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"10th\")]\n",
    "eleventh_graders=gradeleveldf[(gradeleveldf['Grade'] == \"11th\")]\n",
    "twelfth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"12th\")]\n",
    "\n",
    "# Group each by school name\n",
    "ninth_graders_scores=ninth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "tenth_graders_scores=tenth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "eleventh_graders_scores=eleventh_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "twelfth_graders_scores=twelfth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "\n",
    "# Combine series into single data frame\n",
    "math_by_grade=pd.DataFrame({'9th':ninth_graders_scores, '10th':tenth_graders_scores, '11th': eleventh_graders_scores, '12th': twelfth_graders_scores})\n",
    "\n",
    "# Minor data munging\n",
    "math_by_grade=math_by_grade[['9th', '10th', '11th', '12th']]\n",
    "math_by_grade.index.name=None\n",
    "\n",
    "\n",
    "# Display the data frame\n",
    "math_by_grade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Score by Grade "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create data series of scores by grade levels using conditionals\n",
    "\n",
    "\n",
    "\n",
    "#ninth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"9th\")]\n",
    "#tenth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"10th\")]\n",
    "#eleventh_graders=gradeleveldf[(gradeleveldf['Grade'] == \"11th\")]\n",
    "#twelfth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"12th\")]\n",
    "\n",
    "# Group each by school name\n",
    "ninth_graders_reading=ninth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "tenth_graders_reading=tenth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "eleventh_graders_reading=eleventh_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "twelfth_graders_reading=twelfth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "\n",
    "# Combine series into single data frame\n",
    "reading_by_grade=pd.DataFrame({'9th':ninth_graders_scores, '10th':tenth_graders_scores, '11th': eleventh_graders_scores, '12th': twelfth_graders_scores})\n",
    "\n",
    "# Minor data munging\n",
    "reading_by_grade=reading_by_grade[['9th', '10th', '11th', '12th']]\n",
    "reading_by_grade.index.name=None\n",
    "\n",
    "\n",
    "# Display the data frame\n",
    "reading_by_grade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Spending"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Establish the bins -- choose any set of bins you would like, but see below for testing bins\n",
    "# to test, set your bins as follows: [0, 585, 615, 645, 675]\n",
    "# ALSO -- Note that the values for `% Passing Math`, `% Passing Reading` and `% Overall Passing Rate`\n",
    "# were computed using averages of averages -- your results may vary if you use weighted averages \n",
    "\n",
    "# Categorize the spending based on the bins\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-106-dda950038150>, line 17)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-106-dda950038150>\"\u001b[1;36m, line \u001b[1;32m17\u001b[0m\n\u001b[1;33m    school_summary_df['School Size'=pd.cut(school_summary_df[\"Enrollment\"], school_sizebins, labels=school_sizelabels, include_lowest=True)]\u001b[0m\n\u001b[1;37m                                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#establish a data frame with average math score, average reading score, %passing math, %passing reading, %overall passing rate\n",
    "\n",
    "school_sizebins = [0, 1000, 2000, 5000]\n",
    "school_sizelabels=[\"Small(< 1000)\", \"Medium(1000-2000)\", \"Large(2000-5000)\"]\n",
    "\n",
    "\n",
    "# Establish the bins \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Categorize the spending based on the bins\n",
    "\n",
    "# Calculate the scores based on bins\n",
    "\n",
    "school_summary_df['School Size'=pd.cut(school_summary_df[\"Enrollment\"], school_sizebins, labels=school_sizelabels, include_lowest=True)]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Math Score</th>\n",
       "      <th>Reading Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Charter</td>\n",
       "      <td>83.406183</td>\n",
       "      <td>83.902821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>District</td>\n",
       "      <td>76.987026</td>\n",
       "      <td>80.962485</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Math Score  Reading Score\n",
       "0   Charter   83.406183      83.902821\n",
       "1  District   76.987026      80.962485"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Type | Average Math Score | Average Reading Score | % Passing Math | % Passing Reading | % Overall Passing Rate\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "schooltype = pyschools_merge[['type', 'Math Score', 'Reading Score']]\n",
    "\n",
    "schooltype = schooltype.groupby([\"type\"]).mean()\n",
    "\n",
    "schooltype = schooltype.reset_index(drop=False)\n",
    "schooltype\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nteract": {
   "version": "0.8.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
