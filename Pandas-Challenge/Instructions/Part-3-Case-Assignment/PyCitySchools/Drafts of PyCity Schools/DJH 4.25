{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyCity Schools Analysis\n",
    "\n",
    "* As a whole, schools with higher budgets, did not yield better test results. By contrast, schools with higher spending per student actually (\\$645-675) underperformed compared to schools with smaller budgets (<\\$585 per student).\n",
    "\n",
    "* As a whole, smaller and medium sized schools dramatically out-performed large sized schools on passing math performances (89-91% passing vs 67%).\n",
    "\n",
    "* As a whole, charter schools out-performed the public district schools across all metrics. However, more analysis will be required to glean if the effect is due to school practices or the fact that charter schools tend to serve smaller student populations per school. \n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load \n",
    "school_data_to_load = \"Resources/schools_complete.csv\"\n",
    "student_data_to_load = \"Resources/students_complete.csv\"\n",
    "\n",
    "# Read School and Student Data File and store into Pandas Data Frames\n",
    "school_data = pd.read_csv(school_data_to_load)\n",
    "student_data = pd.read_csv(student_data_to_load)\n",
    "\n",
    "# Combine the data into a single dataset (consider using a left join)\n",
    "pyschools_merge = pd.merge(school_data, student_data, on=\"school_name\", how='left')\n",
    "\n",
    "pyschools_merge = pyschools_merge.rename(columns={'budget': 'Budget', 'grade': 'Grade', \"school_name\":\"School\", \"size\": 'Enrollment', \"student_name\": 'Student', 'reading_score': \"Reading Score\", \"math_score\": 'Math Score'})\n",
    "\n",
    "student_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "passed_reading = student_data.loc[student_data['reading_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_reading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "passed_math = student_data.loc[student_data['math_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pct_passed_reading_by_school = passed_reading/total_enr\n",
    "pct_passed_reading_by_school"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pct_passed_math_by_school = passed_math/total_enr\n",
    "pct_passed_math_by_school"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "overall_pct_passed_by_school = (pct_passed_reading_by_school + pct_passed_math_by_school)/2\n",
    "overall_pct_passed_by_school"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pyschools_merge.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "\n",
    "#dataframe needs to have school ID, budget, schoool, enrollment,  \n",
    "\n",
    "#Calculate the Totals (Schools and Students)\n",
    "numschools=school_data[\"School ID\"].count()\n",
    "\n",
    "districtbudget=school_data['budget'].sum()\n",
    "\n",
    "\n",
    "#create customized dataframe for rest of analysis\n",
    "districtsum_df = pyschools_merge [['Student ID', 'Reading Score', 'Math Score']]\n",
    "\n",
    "\n",
    "numstudents=districtsum_df[\"Student ID\"].count()\n",
    "\n",
    "\n",
    "# Calculate the Average Scores\n",
    "readingave=districtsum_df[\"Reading Score\"].mean()\n",
    "\n",
    "\n",
    "mathave=districtsum_df[\"Math Score\"].mean()\n",
    "\n",
    "\n",
    "# Calculate the Percentage Pass Rates\n",
    "passingreading = districtsum_df.loc[districtsum_df['Reading Score'] >= 70]['Reading Score']\n",
    "percpassreading = (len(passingreading)/numstudents)*100\n",
    "\n",
    "\n",
    "\n",
    "passingmath = districtsum_df.loc[districtsum_df['Math Score'] >= 70]['Math Score']\n",
    "percpassmath = (len(passingmath)/numstudents) * 100\n",
    "\n",
    "percpassboth = (percpassreading+percpassmath)/2\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "school_data_complete = pd.DataFrame({\"Number of Schools\": [numschools],\n",
    "                             \"Total Enrollment\": [numstudents],\n",
    "                             \"Total Budget\": [districtbudget],\n",
    "                              \"Average Reading Score\": [readingave],\n",
    "                              \"Average Math Score\": [mathave],\n",
    "                              \"Reading % Passing\": [percpassreading],\n",
    "                              \"Math % Passing\": [percpassmath],\n",
    "                              \"Overall % Passing\": [percpassboth]})\n",
    "\n",
    "school_data_complete\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Display the data frame\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## School Summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#school group you need to set index to school name, merge on index\n",
    "#score_ave = pyschools_merge[['School', 'type', 'Student', 'Reading Score', 'Math Score']]\n",
    "\n",
    "#score_ave = score_ave.groupby(['School', 'Student']).sum()\n",
    "#reading_df = score_ave[score_ave[\"Reading Score\"]>=70][\"Reading Score\"].groupby([\"School\"]).count()\n",
    "#students_took_reading = score_ave[\"Reading Score\"].groupby([\"School\"]).count()\n",
    "#schoolreadingpass = (reading_df/students_took_reading)*100\n",
    "#reset index, merge on column name (same for both\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create school_data_complete\n",
    "\n",
    "school_sum = pyschools_merge [['School', 'type','Enrollment', 'Budget', 'Reading Score', 'Math Score']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the total school budget and per capita spending: DONE\n",
    "\n",
    "school_group = school_sum.groupby([\"School\"]).mean()\n",
    "school_group['Per Pupil Budget'] = school_group [\"Budget\"]/school_group['Enrollment']\n",
    "\n",
    "\n",
    "passed_reading = student_data.loc[student_data['reading_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_reading\n",
    "passed_math = student_data.loc[student_data['math_score']>=70].groupby('school_name').count()['Student ID']\n",
    "passed_math\n",
    "\n",
    "total_enr = student_data.groupby('school_name').count()['Student ID']\n",
    "\n",
    "pct_passed_reading_by_school = passed_reading/total_enr\n",
    "pct_passed_math_by_school = passed_math/total_enr\n",
    "\n",
    "\n",
    "overall_pct_passed_by_school = (pct_passed_reading_by_school + pct_passed_math_by_school)/2\n",
    "\n",
    "#Reading_pass_pct = Read_pass/ ['Enrollment']\n",
    "#schoolspassingreading.count()\n",
    "\n",
    "#school_group['Reading % Passing'] = (schoolpassingreading/school_group['Enrollment'])*100\n",
    "\n",
    "#schoolpassingreading\n",
    "\n",
    "\n",
    "\n",
    "#schoolpassingmath = school_data.loc[school_data['Math Score'] >= 70]['Math Score']\n",
    "#schoolpercpassmath = (len(schoolpassingmath)/\"Enrollment\") * 100\n",
    "\n",
    "#schoolpercpassboth = (schoolpercpassreading+schoolpercpassmath)/2\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#pd.DataFrame({\"Number of Schools\": [numschools],\n",
    "#                             \"Total Enrollment\": [numstudents],\n",
    "#                             \"Total Budget\": [districtbudget],\n",
    "#                              \"Average Reading Score\": [readingave],\n",
    "#                              \"Average Math Score\": [mathave],\n",
    "#                              \"Reading % Passing\": [percpassreading],\n",
    "#                              \"Math % Passing\": [percpassmath],\n",
    "#                              \"Overall % Passing\": [percpassboth]})\n",
    "\n",
    "#school group you need to set index to school name, merge on index\n",
    "#score_ave = pyschools_merge[['School', 'type', 'Student', 'Reading Score', 'Math Score']]\n",
    "\n",
    "#score_ave = score_ave.groupby(['School', 'Student']).sum()\n",
    "#reading_df = score_ave[score_ave[\"Reading Score\"]>=70][\"Reading Score\"].groupby([\"School\"]).count()\n",
    "#students_took_reading = score_ave[\"Reading Score\"].groupby([\"School\"]).count()\n",
    "#schoolreadingpass = (reading_df/students_took_reading)*100\n",
    "#reset index, merge on column name (same for both\n",
    "\n",
    "\n",
    "\n",
    "#pyschools_merge = pd.merge(school_data, student_data, on=\"school_name\", how='left')\n",
    "\n",
    "\n",
    "\n",
    "# Calculate the average test scores:DONE through the dataframe\n",
    "\n",
    "# Calculate the passing scores by creating a filtered data frame?????\n",
    "\n",
    "# Convert to data frame\n",
    "\n",
    "# Minor data munging: rearrange collumns, format numbers\n",
    "\n",
    "#pyschools_merge.head()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "                                              "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_sum\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top Performing Schools (By Passing Rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Sort and show top five schools\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bottom Performing Schools (By Passing Rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort and show bottom five schools\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Math Scores by Grade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create data series of scores by grade levels using conditionals\n",
    "\n",
    "gradeleveldf=pyschools_merge[['School', 'Grade', 'Reading Score', 'Math Score']]\n",
    "\n",
    "ninth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"9th\")]\n",
    "tenth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"10th\")]\n",
    "eleventh_graders=gradeleveldf[(gradeleveldf['Grade'] == \"11th\")]\n",
    "twelfth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"12th\")]\n",
    "\n",
    "# Group each by school name\n",
    "ninth_graders_scores=ninth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "tenth_graders_scores=tenth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "eleventh_graders_scores=eleventh_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "twelfth_graders_scores=twelfth_graders.groupby([\"School\"]).mean()[\"Math Score\"]\n",
    "\n",
    "# Combine series into single data frame\n",
    "math_by_grade=pd.DataFrame({'9th':ninth_graders_scores, '10th':tenth_graders_scores, '11th': eleventh_graders_scores, '12th': twelfth_graders_scores})\n",
    "\n",
    "# Minor data munging\n",
    "math_by_grade=math_by_grade[['9th', '10th', '11th', '12th']]\n",
    "math_by_grade.index.name=None\n",
    "\n",
    "\n",
    "# Display the data frame\n",
    "math_by_grade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Score by Grade "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create data series of scores by grade levels using conditionals\n",
    "\n",
    "\n",
    "\n",
    "#ninth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"9th\")]\n",
    "#tenth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"10th\")]\n",
    "#eleventh_graders=gradeleveldf[(gradeleveldf['Grade'] == \"11th\")]\n",
    "#twelfth_graders=gradeleveldf[(gradeleveldf['Grade'] == \"12th\")]\n",
    "\n",
    "# Group each by school name\n",
    "ninth_graders_reading=ninth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "tenth_graders_reading=tenth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "eleventh_graders_reading=eleventh_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "twelfth_graders_reading=twelfth_graders.groupby([\"School\"]).mean()[\"Reading Score\"]\n",
    "\n",
    "# Combine series into single data frame\n",
    "reading_by_grade=pd.DataFrame({'9th':ninth_graders_scores, '10th':tenth_graders_scores, '11th': eleventh_graders_scores, '12th': twelfth_graders_scores})\n",
    "\n",
    "# Minor data munging\n",
    "reading_by_grade=reading_by_grade[['9th', '10th', '11th', '12th']]\n",
    "reading_by_grade.index.name=None\n",
    "\n",
    "\n",
    "# Display the data frame\n",
    "reading_by_grade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Spending"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Establish the bins -- choose any set of bins you would like, but see below for testing bins\n",
    "# to test, set your bins as follows: [0, 585, 615, 645, 675]\n",
    "# ALSO -- Note that the values for `% Passing Math`, `% Passing Reading` and `% Overall Passing Rate`\n",
    "# were computed using averages of averages -- your results may vary if you use weighted averages \n",
    "\n",
    "# Categorize the spending based on the bins\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#establish a data frame with average math score, average reading score, %passing math, %passing reading, %overall passing rate\n",
    "\n",
    "schoolsize_merge = pd.merge(school_data, student_data, on=\"school_name\", how='left')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "schoolsize=school_data [['School', 'Enrollment', 'Reading Score', 'Math Score']]\n",
    " \n",
    "# Establish the bins \n",
    "\n",
    "bins = [0, 1000, 2000, 5000]\n",
    "\n",
    "\n",
    "\n",
    "# Categorize the spending based on the bins\n",
    "group_names=[\"Small\", \"Medium\", \"Large\"]\n",
    "# Calculate the scores based on bins\n",
    "\n",
    "schoolsize=pd.cut(schoolsize[\"Enrollment\"], bins, labels=group_names, include_lowest=True)\n",
    "\n",
    "schoolsize\n",
    "\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scores by School Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Type | Average Math Score | Average Reading Score | % Passing Math | % Passing Reading | % Overall Passing Rate\n",
    "\n",
    "# Assemble into data frame\n",
    "\n",
    "schooltype = pyschools_merge[['type', 'Math Score', 'Reading Score']]\n",
    "\n",
    "schooltype = schooltype.groupby([\"type\"]).mean()\n",
    "\n",
    "schooltype = schooltype.reset_index(drop=False)\n",
    "schooltype\n",
    "\n",
    "# Minor data munging\n",
    "\n",
    "# Display results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nteract": {
   "version": "0.8.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
